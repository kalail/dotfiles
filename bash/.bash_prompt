# Colors
COLOR_NEUTRAL="\[\e[48;5;237m\]"
COLOR_RESET="\[\e[0m\]"
COLOR_1="\[\e[48;5;196m\]"
COLOR_2="\[\e[48;5;202m\]"
COLOR_3="\[\e[48;5;197m\]"
COLOR_4="\[\e[48;5;199m\]"
COLOR_5_1="\[\e[48;5;235m\]"
COLOR_5_2="\[\e[48;5;239m\]"
COLOR_6="\[\e[48;5;245m\]"

# Fancy prompt.
prompt_cmd () {
    PSL="${COLOR_1}  BASH  ${COLOR_RESET}"
    PSL+="${COLOR_2} \u ${COLOR_RESET}"
    PSL+="${COLOR_3} @\h ${COLOR_RESET}"
    PSL+="${COLOR_4} \w ${COLOR_RESET}"

    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        local status=$(git status --porcelain 2> /dev/null)
        if [[ "$status" != "" ]]; then
            git_dirty='*'
        else
            git_dirty=''
        fi
        PSL+="${COLOR_5_1} GIT ${COLOR_RESET}"
        PSL+="${COLOR_5_2} $(git branch | grep "*" | cut -d" " -f2)$git_dirty ${COLOR_RESET}"
    fi

    if [[ -f "Dockerfile" ]]; then
        PSL+="${COLOR_5_1} Dockerfile ${COLOR_RESET}"
    fi

    if [[ -f "docker-compose.yml" ]]; then
        PSL+="${COLOR_5_1} docker-compose.yml ${COLOR_RESET}"
    fi

    if ! [[ -z "$VIRTUAL_ENV" ]]; then
        PSL+="${COLOR_5_1} VENV ${COLOR_RESET}"
        PSL+="${COLOR_5_2} $VIRTUAL_ENV ${COLOR_RESET}"
    fi

    if [[ -d "venv" ]] && [[ -z "$VIRTUAL_ENV" ]]; then
        PSL+="${COLOR_6} [VENV] ${COLOR_RESET}"
    fi

    if [[ -f "Gemfile" ]]; then
        PSL+="${COLOR_6} [GEMFILE] ${COLOR_RESET}"
    fi

    if [[ -f "Pipfile" ]]; then
        PSL+="${COLOR_6} [PIPFILE] ${COLOR_RESET}"
    fi

    if [[ -f "package.json" ]]; then
        PSL+="${COLOR_6} [PACKAGE.JSON] ${COLOR_RESET}"
    fi

    PS1="${PSL}\nâ–¶ "
    # PS1="${PSL}\n> "
    # PS1="${PSL}\n$ "
}
export PROMPT_COMMAND='prompt_cmd'

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
